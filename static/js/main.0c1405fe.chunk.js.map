{"version":3,"sources":["routePages/Categories/styles.ts","data/fetch/functions.ts","routePages/Categories/Categories.tsx","routePages/EditCategory/styles.ts","routePages/EditCategory/EditCategory.tsx","routePages/EditProduct/styles.ts","routePages/EditProduct/EditProduct.tsx","routePages/Home/styles.ts","routePages/Home/Home.tsx","routePages/CreateNew/styles.ts","routePages/CreateNew/NewCategory.tsx","routePages/CreateNew/NewProduct.tsx","routePages/CreateNew/CreateNew.tsx","routePages/Products/styles.ts","routePages/Products/Products.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","center","display","flexDirection","justifyContent","alignItems","minHeight","fetchProductsWithCategoryFromAPI","a","fetch","process","headers","Authorization","response","json","fetchCategoriesFromAPI","updateCategory","id","name","method","body","JSON","stringify","updateProduct","category_id","type","tax_id","status","measure_type","createCategory","createProduct","console","log","Categories","classes","React","useState","CategoriesList","setCategoriesList","useQuery","onSuccess","data","forEach","cat","isLoadingCategories","isLoading","errorCategories","error","rowsHeader","useMemo","push","rows","map","Container","className","size","Box","Typography","variant","align","TableContainer","component","Paper","elevation","Table","TableHead","TableRow","row","index","TableCell","TableBody","Object","values","value","EditCategories","queryClient","useQueryClient","newCategoriesNames","setNewCategoriesNames","editCategoryMutation","useMutation","Array","length","fill","invalidateQueries","alert","onError","handleSetNewCategory","useCallback","event","newName","target","newCategoriesNamesCopy","TextField","multiline","placeholder","onChange","save","Button","onClick","mutate","EditProducts","newProductsData","setNewProductsData","productsData","setProductsData","prod","category","isLoadingProducts","errorProducts","editProductMutation","handleSetNewProductName","newProductsDataCopy","handleNewCategoryChange","newCategoryId","toString","newCategory","FormControl","InputLabel","Select","sx","width","labelId","label","MenuItem","Home","NewCategory","newCategoryName","setNewCategoryName","newCategoryMutation","gutterBottom","NewProduct","setName","setCategory","allCategories","setAllCategories","handleCategoryChange","handleSetName","marginBottom","CreateNew","Products","ProductList","setProductList","product","categoryId","categoryName","App","Navbar","bg","expand","Brand","href","Toggle","Collapse","Nav","Link","exact","path","EditProduct","EditCategory","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","QueryClient","ReactDOM","render","client","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c1405fe.chunk.js","sourcesContent":["import { createStyles, makeStyles } from '@mui/styles'\r\n\r\nexport const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        center: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: '70vh',\r\n        },\r\n    })\r\n)\r\n","export const fetchProductsFromAPI = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/products`, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `${process.env.REACT_APP_API_AUTH_KEY}`,\r\n        },\r\n    })\r\n    return await response.json()\r\n}\r\n\r\nexport const fetchProductsWithCategoryFromAPI = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/products?include=category&include=`, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `${process.env.REACT_APP_API_AUTH_KEY}`,\r\n        },\r\n    })\r\n    return await response.json()\r\n}\r\n\r\nexport const fetchCategoriesFromAPI = async () => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/product_categories`,\r\n        {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `${process.env.REACT_APP_API_AUTH_KEY}`,\r\n            },\r\n        }\r\n    )\r\n    return await response.json()\r\n}\r\n\r\nexport const updateCategory = async ({\r\n    id,\r\n    name,\r\n}: {\r\n    id: string\r\n    name: string\r\n}) => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/product_categories/${id}`,\r\n        {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                id: id,\r\n                name: name,\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `${process.env.REACT_APP_API_AUTH_KEY}`,\r\n            },\r\n        }\r\n    )\r\n    return await response.json()\r\n}\r\n\r\nexport const updateProduct = async ({id, name, category_id}:\r\n    {\r\n        id: string,\r\n        name: string,\r\n        category_id: string,\r\n    },\r\n) => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/products/${id}`,\r\n        {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                name: name,\r\n                category_id: category_id,\r\n                type: \"BASIC\",\r\n                tax_id: 1,\r\n                status: \"ENABLED\",\r\n                measure_type: \"ITEM\"\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `${process.env.REACT_APP_API_AUTH_KEY}`,\r\n            },\r\n        }\r\n    )\r\n    return await response.json()\r\n}\r\n\r\nexport const createCategory = async ({ name }: {name: string}) => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/product_categories`,\r\n        {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                name: name,\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `${process.env.REACT_APP_API_AUTH_KEY}`,\r\n            },\r\n        }\r\n    )\r\n    return await response.json()\r\n}\r\n\r\nexport const createProduct = async ({name,category_id}:{ name: string, category_id: string }) => {\r\n    console.log(name, category_id)\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/products/`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            name: name,\r\n            category_id: category_id,\r\n            type: \"BASIC\",\r\n            measure_type: \"ITEM\",\r\n            status: \"ENABLED\",\r\n            tax_id: 1\r\n        }),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `${process.env.REACT_APP_API_AUTH_KEY}`,\r\n        },\r\n    })\r\n    return await response.json()\r\n}\r\n","import React, { useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n} from '@mui/material'\r\nimport { Container } from 'react-bootstrap'\r\nimport { useStyles } from './styles'\r\nimport { fetchCategoriesFromAPI } from '../../data/fetch'\r\nimport { useQuery } from 'react-query'\r\nimport { ClipLoader } from 'react-spinners'\r\n\r\nconst Categories = () => {\r\n    const classes = useStyles()\r\n    const [CategoriesList, setCategoriesList] = React.useState<string[]>([])\r\n    const { isLoading: isLoadingCategories, error: errorCategories } = useQuery(\r\n        'categoriesList',\r\n        fetchCategoriesFromAPI,\r\n        {\r\n            onSuccess: (data) => {\r\n                setCategoriesList([])\r\n                data.data.forEach((cat: any) => {\r\n                    setCategoriesList((CategoriesList) => [\r\n                        ...CategoriesList,\r\n                        cat.name,\r\n                    ])\r\n                })\r\n            },\r\n        }\r\n    )\r\n\r\n    const rowsHeader: string[] = useMemo(() => {\r\n        const rowsHeader: string[] = []\r\n        rowsHeader.push('category')\r\n        return rowsHeader\r\n    }, [])\r\n\r\n    const rows: { [key: string]: null | string }[] = useMemo(() => {\r\n        return CategoriesList.map((cat) => {\r\n            return { name: cat }\r\n        })\r\n    }, [CategoriesList])\r\n\r\n    if (isLoadingCategories)\r\n        return (\r\n            <Container className={classes.center}>\r\n                <ClipLoader size={150} />\r\n            </Container>\r\n        )\r\n    if (errorCategories) return <Box>An error has occurred</Box>\r\n\r\n    return (\r\n        <Container className={classes.center}>\r\n            <Typography variant={'h2'} align={'center'}>\r\n                Categories list:\r\n            </Typography>\r\n            <TableContainer component={Paper} elevation={0}>\r\n                <Table aria-label=\"products table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {rowsHeader.map((row, index) => (\r\n                                <TableCell key={index}>\r\n                                    <Typography variant={'h4'}>\r\n                                        {row}\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                {Object.values(row).map((value, index) => (\r\n                                    <TableCell key={index}>{value}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Categories\r\n","import { createStyles, makeStyles } from '@mui/styles'\r\n\r\nexport const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        center: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: '70vh',\r\n        },\r\n    })\r\n)\r\n","import React, { ReactNode, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography,\r\n} from '@mui/material'\r\nimport {\r\n    useMutation,\r\n    useQuery,\r\n    useQueryClient,\r\n    MutationFunction,\r\n} from 'react-query'\r\nimport { Container } from 'react-bootstrap'\r\nimport { useStyles } from './styles'\r\nimport { fetchCategoriesFromAPI, updateCategory } from '../../data/fetch'\r\nimport { ClipLoader } from 'react-spinners'\r\n\r\nconst EditCategories = () => {\r\n    const classes = useStyles()\r\n    const queryClient = useQueryClient()\r\n    const [newCategoriesNames, setNewCategoriesNames] = React.useState<\r\n        string[]\r\n    >([])\r\n    const [CategoriesList, setCategoriesList] = React.useState<\r\n        { [key: string]: string }[]\r\n    >([])\r\n    const { isLoading: isLoadingCategories, error: errorCategories } = useQuery(\r\n        'categoriesEdit',\r\n        fetchCategoriesFromAPI,\r\n        {\r\n            onSuccess: (data) => {\r\n                setCategoriesList([])\r\n                setNewCategoriesNames((newCategoriesNames) => [\r\n                    ...newCategoriesNames,\r\n                    '',\r\n                ])\r\n                data.data.forEach((cat: any) => {\r\n                    setCategoriesList((CategoriesList) => [\r\n                        ...CategoriesList,\r\n                        { name: cat.name, id: cat.id },\r\n                    ])\r\n                })\r\n            },\r\n        }\r\n    )\r\n    const editCategoryMutation = useMutation(\r\n        updateCategory as MutationFunction,\r\n        {\r\n            onSuccess: () => {\r\n                setNewCategoriesNames(Array(CategoriesList.length).fill(''))\r\n                queryClient.invalidateQueries('categoriesEdit')\r\n                alert('success')\r\n            },\r\n            onError: () => {\r\n                alert('error')\r\n            },\r\n        }\r\n    )\r\n\r\n    const rowsHeader: string[] = useMemo(() => {\r\n        const rowsHeader: string[] = []\r\n        rowsHeader.push('name')\r\n        rowsHeader.push('new name')\r\n        rowsHeader.push('edit')\r\n        return rowsHeader\r\n    }, [])\r\n\r\n    const handleSetNewCategory = React.useCallback(\r\n        (\r\n            index: number,\r\n            event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n        ) => {\r\n            const newName = event.target.value\r\n            const newCategoriesNamesCopy = [...newCategoriesNames]\r\n            newCategoriesNamesCopy[index] = newName\r\n            setNewCategoriesNames(newCategoriesNamesCopy)\r\n        },\r\n        [newCategoriesNames]\r\n    )\r\n\r\n    const rows: { [key: string]: ReactNode }[] = useMemo(() => {\r\n        return CategoriesList.map((cat, index) => {\r\n            return {\r\n                name: <Typography>{cat.name}</Typography>,\r\n                newName: (\r\n                    <TextField\r\n                        multiline\r\n                        placeholder={cat.name}\r\n                        value={newCategoriesNames[index]}\r\n                        onChange={(event) => handleSetNewCategory(index, event)}\r\n                    />\r\n                ),\r\n                save: (\r\n                    <Button\r\n                        onClick={() =>\r\n                            editCategoryMutation.mutate({\r\n                                id: cat.id,\r\n                                name: newCategoriesNames[index],\r\n                            })\r\n                        }\r\n                    >\r\n                        {isLoadingCategories ? (\r\n                            <ClipLoader />\r\n                        ) : (\r\n                            <Typography>Save</Typography>\r\n                        )}\r\n                    </Button>\r\n                ),\r\n            }\r\n        })\r\n    }, [\r\n        CategoriesList,\r\n        editCategoryMutation,\r\n        handleSetNewCategory,\r\n        isLoadingCategories,\r\n        newCategoriesNames,\r\n    ])\r\n\r\n    if (isLoadingCategories)\r\n        return (\r\n            <Container className={classes.center}>\r\n                <ClipLoader size={150} />\r\n            </Container>\r\n        )\r\n    if (errorCategories) return <Box>An error has occurred</Box>\r\n\r\n    return (\r\n        <Container className={classes.center}>\r\n            <Typography variant={'h2'} align={'center'}>\r\n                Categories list:\r\n            </Typography>\r\n            <TableContainer component={Paper} elevation={0}>\r\n                <Table aria-label=\"products table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {rowsHeader.map((row, index) => (\r\n                                <TableCell key={index}>\r\n                                    <Typography variant={'h4'}>\r\n                                        {row}\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                {Object.values(row).map((value, index) => (\r\n                                    <TableCell key={index}>{value}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default EditCategories\r\n","import { createStyles, makeStyles } from '@mui/styles'\r\n\r\nexport const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        center: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: '70vh',\r\n        },\r\n    })\r\n)\r\n","import React, { ReactNode, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    SelectChangeEvent,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography,\r\n} from '@mui/material'\r\nimport {\r\n    useMutation,\r\n    useQuery,\r\n    useQueryClient,\r\n    MutationFunction,\r\n} from 'react-query'\r\nimport { Container } from 'react-bootstrap'\r\nimport { useStyles } from './styles'\r\nimport {\r\n    fetchProductsWithCategoryFromAPI,\r\n    updateProduct,\r\n    fetchCategoriesFromAPI\r\n} from '../../data/fetch'\r\nimport { ClipLoader } from 'react-spinners'\r\n\r\nconst EditProducts = () => {\r\n    const classes = useStyles()\r\n    const queryClient = useQueryClient()\r\n    const [newProductsData, setNewProductsData] = React.useState<\r\n        { category_id: string; name: string; id: string }[]\r\n    >([])\r\n    const [productsData, setProductsData] = React.useState<\r\n        { category: string; name: string; id: string }[]\r\n    >([])\r\n    const [CategoriesList, setCategoriesList] = React.useState<\r\n        { id: string; name: string }[]\r\n    >([])\r\n    const { isLoading: isLoadingProducts, error: errorProducts } = useQuery(\r\n        'productsEdit',\r\n        fetchProductsWithCategoryFromAPI,\r\n        {\r\n            onSuccess: (data) => {\r\n                setProductsData([])\r\n                setNewProductsData([])\r\n                data.data.forEach((prod: any) => {\r\n                    setProductsData((productsData) => [\r\n                        ...productsData,\r\n                        {\r\n                            name: prod.name,\r\n                            category: prod.category.name,\r\n                            id: prod.id,\r\n                        },\r\n                    ])\r\n                    setNewProductsData((newProductsData) => [\r\n                        ...newProductsData,\r\n                        { category_id: '', name: '', id: prod.id },\r\n                    ])\r\n                })\r\n            },\r\n        }\r\n    )\r\n    const { isLoading: isLoadingCategories, error: errorCategories } = useQuery(\r\n        'categoriesSelect',\r\n        fetchCategoriesFromAPI,\r\n        {\r\n            onSuccess: (data) => {\r\n                setCategoriesList([])\r\n                data.data.forEach((cat: any) => {\r\n                    setCategoriesList((CategoriesList) => [\r\n                        ...CategoriesList,\r\n                        { name: cat.name, id: cat.id },\r\n                    ])\r\n                })\r\n            },\r\n        }\r\n    )\r\n    const editProductMutation = useMutation(updateProduct as MutationFunction, {\r\n        onSuccess: () => {\r\n            setNewProductsData(\r\n                Array(newProductsData.length).fill({\r\n                    category_id: '',\r\n                    name: '',\r\n                    id: '',\r\n                })\r\n            )\r\n            queryClient.invalidateQueries('productsEdit')\r\n            alert('success')\r\n        },\r\n        onError: () => {\r\n            alert('error')\r\n        },\r\n    })\r\n\r\n    const rowsHeader: string[] = useMemo(() => {\r\n        const rowsHeader: string[] = []\r\n        rowsHeader.push('name')\r\n        rowsHeader.push('category')\r\n        rowsHeader.push('new name')\r\n        rowsHeader.push('new category')\r\n        rowsHeader.push('edit')\r\n        return rowsHeader\r\n    }, [])\r\n\r\n    const handleSetNewProductName = React.useCallback(\r\n        (\r\n            index: number,\r\n            event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n        ) => {\r\n            const newName = event.target.value\r\n            const newProductsDataCopy = [...newProductsData]\r\n            newProductsDataCopy[index].name = newName\r\n            setNewProductsData(newProductsDataCopy)\r\n        },\r\n        [newProductsData]\r\n    )\r\n\r\n    const handleNewCategoryChange = React.useCallback(\r\n        (index: number, event: SelectChangeEvent<string>) => {\r\n            const newCategoryId = event.target.value\r\n            const newProductsDataCopy = [...newProductsData]\r\n            newProductsDataCopy[index].category_id = newCategoryId.toString()\r\n            setNewProductsData(newProductsDataCopy)\r\n        },\r\n        [newProductsData]\r\n    )\r\n\r\n    const rows: { [key: string]: ReactNode }[] = useMemo(() => {\r\n        return productsData.map(({ name, category, id }, index) => {\r\n            return {\r\n                name: <Typography>{name}</Typography>,\r\n                category: (\r\n                    <Typography>\r\n                        {category}\r\n                    </Typography>\r\n                ),\r\n                newName: (\r\n                    <TextField\r\n                        multiline\r\n                        placeholder={name}\r\n                        value={newProductsData[index]?.name ?? null}\r\n                        onChange={(event) =>\r\n                            handleSetNewProductName(index, event)\r\n                        }\r\n                    />\r\n                ),\r\n                newCategory: (\r\n                    <FormControl>\r\n                        <InputLabel id=\"new_category\">new Category</InputLabel>\r\n                        <Select\r\n                            sx={{\r\n                                width: 300,\r\n                            }}\r\n                            labelId=\"new_category_label\"\r\n                            id=\"new_category_select\"\r\n                            value={newProductsData[index]?.category_id ?? null}\r\n                            label=\"new category\"\r\n                            onChange={(event) =>\r\n                                handleNewCategoryChange(index, event)\r\n                            }\r\n                        >\r\n                            {CategoriesList.map(cat => <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>)}\r\n                        </Select>\r\n                    </FormControl>\r\n                ),\r\n                save: (\r\n                    <Button\r\n                        onClick={() =>\r\n                            editProductMutation.mutate({\r\n                                id: newProductsData[index].id,\r\n                                name: newProductsData[index].name,\r\n                                category_id: newProductsData[index].category_id,\r\n                            })\r\n                        }\r\n                    >\r\n                        {isLoadingProducts ? (\r\n                            <ClipLoader />\r\n                        ) : (\r\n                            <Typography>Save</Typography>\r\n                        )}\r\n                    </Button>\r\n                ),\r\n            }\r\n        })\r\n    }, [\r\n        CategoriesList,\r\n        isLoadingProducts,\r\n        newProductsData,\r\n        productsData,\r\n        handleSetNewProductName,\r\n        editProductMutation,\r\n        handleNewCategoryChange,\r\n    ])\r\n\r\n    if (isLoadingProducts || isLoadingCategories)\r\n        return (\r\n            <Container className={classes.center}>\r\n                <ClipLoader size={150} />\r\n            </Container>\r\n        )\r\n    if (errorProducts || errorCategories)\r\n        return <Box>An error has occurred</Box>\r\n\r\n    return (\r\n        <Container className={classes.center}>\r\n            <Typography variant={'h2'} align={'center'}>\r\n                Products list:\r\n            </Typography>\r\n            <TableContainer component={Paper} elevation={0}>\r\n                <Table aria-label=\"products table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {rowsHeader.map((row, index) => (\r\n                                <TableCell key={index}>\r\n                                    <Typography variant={'h4'}>\r\n                                        {row}\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                {Object.values(row).map((value, index) => (\r\n                                    <TableCell key={index}>{value}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default EditProducts\r\n","import { createStyles, makeStyles } from '@mui/styles'\r\n\r\nexport const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        center: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: '70vh',\r\n        },\r\n    })\r\n)\r\n","import React from 'react'\r\nimport { Typography } from '@mui/material'\r\nimport { Container } from 'react-bootstrap'\r\nimport { useStyles } from './styles'\r\n\r\nconst Home = () => {\r\n    const classes = useStyles()\r\n    return (\r\n        <Container className={classes.center}>\r\n            <Typography variant={'body1'} align={'center'}>\r\n                Home\r\n            </Typography>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import { createStyles, makeStyles } from '@mui/styles'\r\n\r\nexport const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        center: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: '40vh',\r\n        },\r\n    })\r\n)\r\n","import React, { useState } from 'react'\r\nimport { Box, Button, TextField, Typography } from '@mui/material'\r\nimport { MutationFunction, useMutation } from 'react-query'\r\nimport { createCategory } from '../../data/fetch'\r\nimport { useStyles } from './styles'\r\n\r\nconst NewCategory = () => {\r\n    const classes = useStyles()\r\n    const [newCategoryName, setNewCategoryName] =useState('')\r\n    const newCategoryMutation = useMutation(\r\n        createCategory as MutationFunction,\r\n        {\r\n            onSuccess: () => {\r\n                setNewCategoryName('')\r\n                alert('success')\r\n            },\r\n            onError: () => {\r\n                alert('error')\r\n            },\r\n        }\r\n    )\r\n\r\n    const handleSetNewCategory = React.useCallback(\r\n        (\r\n            event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n        ) => {\r\n            const newName = event.target.value\r\n            setNewCategoryName(newName)\r\n        },\r\n        []\r\n    )\r\n    return (\r\n        <Box className={classes.center}>\r\n            <Typography variant={'body1'} align={'center'} gutterBottom>\r\n                New Category\r\n            </Typography>\r\n            <TextField\r\n                multiline\r\n                placeholder={'name'}\r\n                value={newCategoryName}\r\n                onChange={(event) => handleSetNewCategory( event)}\r\n            />\r\n            <Button\r\n                onClick={() =>\r\n                    newCategoryMutation.mutate({\r\n                        name: newCategoryName,\r\n                    })\r\n                }\r\n            >\r\n                <Typography>Save</Typography>\r\n            </Button>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default NewCategory","import React, { useState } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    SelectChangeEvent,\r\n    TextField,\r\n    Typography,\r\n} from '@mui/material'\r\nimport { Container } from 'react-bootstrap'\r\nimport { MutationFunction, useMutation, useQuery } from 'react-query'\r\nimport { ClipLoader } from 'react-spinners'\r\nimport {  createProduct, fetchCategoriesFromAPI } from '../../data/fetch'\r\nimport { useStyles } from './styles'\r\n\r\nconst NewProduct = () => {\r\n    const [name, setName] =useState('')\r\n    const [category, setCategory] = useState('')\r\n    const classes = useStyles()\r\n    const [allCategories, setAllCategories] = useState<{name:string, id:string}[]>([])\r\n    const { isLoading: isLoadingCategories, error: errorCategories } = useQuery(\r\n        'categoriesSelect',\r\n        fetchCategoriesFromAPI,\r\n        {\r\n            onSuccess: (data) => {\r\n                setAllCategories([])\r\n                data.data.forEach((cat: any) => {\r\n                    setAllCategories((allCategories) => [\r\n                        ...allCategories,\r\n                        { name: cat.name, id: cat.id },\r\n                    ])\r\n                })\r\n            },\r\n        }\r\n    )\r\n    const newCategoryMutation = useMutation(\r\n        createProduct as MutationFunction,\r\n        {\r\n            onSuccess: () => {\r\n                setName('')\r\n                setCategory('')\r\n                alert('success')\r\n            },\r\n            onError: () => {\r\n                alert('error')\r\n            },\r\n        }\r\n    )\r\n\r\n    const handleCategoryChange = React.useCallback(\r\n        (event: SelectChangeEvent<string>) => {\r\n            const newCategoryId = event.target.value\r\n            setCategory(newCategoryId)\r\n        },\r\n        []\r\n    )\r\n    const handleSetName = React.useCallback(\r\n        (\r\n            event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n        ) => {\r\n            const newName = event.target.value\r\n            setName(newName)\r\n        },\r\n        []\r\n    )\r\n\r\n    if (isLoadingCategories)\r\n        return (\r\n            <Container className={classes.center}>\r\n                <ClipLoader size={150} />\r\n            </Container>\r\n        )\r\n    if (errorCategories)\r\n        return <Box>An error has occurred</Box>\r\n    return (\r\n        <Box className={classes.center}>\r\n            <Typography variant={'body1'} align={'center'} gutterBottom>\r\n                New Product\r\n            </Typography>\r\n            <TextField\r\n                sx={{\r\n                    marginBottom:1,\r\n                }}\r\n                multiline\r\n                placeholder={'name'}\r\n                value={name}\r\n                onChange={(event) => handleSetName( event)}\r\n            />\r\n            <FormControl>\r\n                <InputLabel id=\"new_category\">new Category</InputLabel>\r\n                <Select\r\n                    sx={{\r\n                        width: 300,\r\n                        marginBottom: 2,\r\n                    }}\r\n                    labelId=\"new_category_label\"\r\n                    id=\"new_category_select\"\r\n                    value={category}\r\n                    label=\"new category\"\r\n                    onChange={(event) =>\r\n                        handleCategoryChange(event)\r\n                    }\r\n                >\r\n                    {allCategories.map(cat => <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>)}\r\n                </Select>\r\n            </FormControl>\r\n            <Button\r\n                onClick={() =>\r\n                    newCategoryMutation.mutate({\r\n                        name: name,\r\n                        category_id: category,\r\n                    })\r\n                }\r\n            >\r\n                <Typography>Save</Typography>\r\n            </Button>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default NewProduct","import React from 'react'\r\nimport { Container } from 'react-bootstrap'\r\nimport NewCategory from './NewCategory'\r\nimport NewProduct from './NewProduct'\r\nimport { useStyles } from './styles'\r\n\r\nconst CreateNew = () => {\r\n    const classes = useStyles()\r\n    return (\r\n        <Container className={classes.center}>\r\n            <NewCategory/>\r\n            <NewProduct/>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CreateNew\r\n","import { createStyles, makeStyles } from '@mui/styles'\r\n\r\nexport const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        center: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: '70vh',\r\n        },\r\n    })\r\n)\r\n","import React, { useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n} from '@mui/material'\r\nimport { Container } from 'react-bootstrap'\r\nimport { useStyles } from './styles'\r\nimport { fetchProductsWithCategoryFromAPI } from '../../data/fetch'\r\nimport { useQuery } from 'react-query'\r\nimport { ClipLoader } from 'react-spinners'\r\n\r\nconst Products = () => {\r\n    const classes = useStyles()\r\n    const [ProductList, setProductList] = React.useState<\r\n        {\r\n            name: string\r\n            categoryId: string,\r\n            categoryName: string\r\n        }[]\r\n    >([])\r\n    const { isLoading: isLoadingProducts, error: errorProducts } = useQuery(\r\n        'products',\r\n        fetchProductsWithCategoryFromAPI,\r\n        {\r\n            onSuccess: (data) => {\r\n                setProductList([])\r\n                data.data.forEach((prod: any) => {\r\n                    const product = {\r\n                        name: prod.name,\r\n                        categoryId: prod.category.id,\r\n                        categoryName: prod.category.name\r\n                    }\r\n                    setProductList((ProductList) => [...ProductList, product])\r\n                })\r\n            },\r\n        }\r\n    )\r\n\r\n    const rowsHeader: string[] = useMemo(() => {\r\n        const rowsHeader: string[] = []\r\n        rowsHeader.push('name')\r\n        rowsHeader.push('category')\r\n        return rowsHeader\r\n    }, [])\r\n\r\n    const rows: { [key: string]: null | string }[] = useMemo(() => {\r\n        return ProductList.map((prod, index) => {\r\n            return { name: prod.name, category: prod.categoryName,  }\r\n        })\r\n    }, [ProductList])\r\n\r\n    if (isLoadingProducts)\r\n        return (\r\n            <Container className={classes.center}>\r\n                <ClipLoader size={150} />\r\n            </Container>\r\n        )\r\n    if (errorProducts)\r\n        return <Box>An error has occurred</Box>\r\n\r\n    return (\r\n        <Container className={classes.center}>\r\n            <Typography variant={'h2'} align={'center'}>\r\n                Products list:\r\n            </Typography>\r\n            <TableContainer component={Paper} elevation={0}>\r\n                <Table aria-label=\"products table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {rowsHeader.map((row, index) => (\r\n                                <TableCell key={index}>\r\n                                    <Typography variant={'h4'}>\r\n                                        {row}\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                {Object.values(row).map((value, index) => (\r\n                                    <TableCell key={index}>{value}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Products\r\n","import React from 'react'\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport { Navbar, Container, Nav } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {\r\n    Categories, CreateNew,\r\n    EditCategory,\r\n    EditProduct,\r\n    Home,\r\n    Products,\r\n} from './routePages'\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"#home\">Lorem...</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"me-auto\">\r\n                            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                            <Nav.Link href=\"#products\">Products</Nav.Link>\r\n                            <Nav.Link href=\"#categories\">Categories</Nav.Link>\r\n                            <Nav.Link href=\"#products/edit\">\r\n                                Edit Products\r\n                            </Nav.Link>\r\n                            <Nav.Link href=\"#categories/edit\">\r\n                                Edit Categories\r\n                            </Nav.Link>\r\n                            <Nav.Link href=\"#new\">\r\n                                Create new\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/products\" component={Products} />\r\n                    <Route exact path=\"/categories\" component={Categories} />\r\n                    <Route\r\n                        exact\r\n                        path=\"/products/edit\"\r\n                        component={EditProduct}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path=\"/categories/edit\"\r\n                        component={EditCategory}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path=\"/new\"\r\n                        component={CreateNew}\r\n                    />\r\n                    <Route path=\"/\" component={Home} />\r\n                </Switch>\r\n            </Router>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { QueryClient, QueryClientProvider } from 'react-query'\r\n\r\nconst queryClient = new QueryClient()\r\n\r\nReactDOM.render(\r\n    <QueryClientProvider client={queryClient}>\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>\r\n    </QueryClientProvider>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}